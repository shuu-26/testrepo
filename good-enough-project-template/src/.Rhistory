## install and load packages
library(tidyverse, meta)
all_results <- read.csv("../data/temp/results_per_dap.csv")
View(all_results)
View(all_results)
# remove row names column
all_results <- all_results %>%
select(-X)
View(all_results)
bifap_data <- all_results
pharmo_data <- all_results
ars_data <- all_results
cprd_data <- all_results
# Format Data -------------------------------------------------------------
# adding dlab variable
bifap_data <- bifap_data %>%
mutate(dlab = "BIFAP")
pharmo_data <- pharmo_data %>%
mutate(dlab = "PHARMO")
ars_data <- ars_data %>%
mutate(dlab = "ARS")
cprd_data <- cprd_data %>%
mutate(dlab = "CPRD")
# add all together
scri_data <- rbind(bifap_data, pharmo_data, ars_data, cprd_data)
# write function so it's easy to change settings without having to copy-paste code
create_tab1 <- function(adjustment, riskwindow, outcome) {
meta_analysis <- metagen(data = scri_data %>% filter(analysis == adjustment & label == riskwindow &
eventtype == outcome),
TE = yi, seTE = sei, studlab = dlab,
sm = "IRR", lower = lci, upper = uci,
random = T, fixed = F,
subgroup = vacctype)
return(meta_analysis)
}
# loop over the different outcomes
# this can also easily be adjusted to accommodate more outcomes
outcomes <- c("Myocarditis", "Pericarditis")
tab1 <- vector(mode = "list", length = length(outcomes))
names(tab1) <- outcomes
for (i in 1:length(outcomes)) {
# Run analysis
u_dose1 <- create_tab1(adjustment = "unadjusted", riskwindow = "dose 1 risk window", outcome = outcomes[i])
u_dose2 <- create_tab1(adjustment = "unadjusted", riskwindow = "dose 2 risk window", outcome = outcomes[i])
a_dose1 <- create_tab1(adjustment = "adjusted", riskwindow = "dose 1 risk window", outcome = outcomes[i])
a_dose2 <- create_tab1(adjustment = "adjusted", riskwindow = "dose 2 risk window", outcome = outcomes[i])
# make the table
tab <- data.frame(
vacc = u_dose1$bylevs,
irr_1 = exp(u_dose1$TE.random.w),
lci_1 = exp(u_dose1$lower.random.w),
uci_1 = exp(u_dose1$upper.random.w),
irr_2 = exp(u_dose2$TE.random.w),
lci_2 = exp(u_dose2$lower.random.w),
uci_2 = exp(u_dose2$upper.random.w))
# save table
tab1[[i]] <- tab
}
library(meta)
for (i in 1:length(outcomes)) {
# Run analysis
u_dose1 <- create_tab1(adjustment = "unadjusted", riskwindow = "dose 1 risk window", outcome = outcomes[i])
u_dose2 <- create_tab1(adjustment = "unadjusted", riskwindow = "dose 2 risk window", outcome = outcomes[i])
a_dose1 <- create_tab1(adjustment = "adjusted", riskwindow = "dose 1 risk window", outcome = outcomes[i])
a_dose2 <- create_tab1(adjustment = "adjusted", riskwindow = "dose 2 risk window", outcome = outcomes[i])
# make the table
tab <- data.frame(
vacc = u_dose1$bylevs,
irr_1 = exp(u_dose1$TE.random.w),
lci_1 = exp(u_dose1$lower.random.w),
uci_1 = exp(u_dose1$upper.random.w),
irr_2 = exp(u_dose2$TE.random.w),
lci_2 = exp(u_dose2$lower.random.w),
uci_2 = exp(u_dose2$upper.random.w))
# save table
tab1[[i]] <- tab
}
View(tab1)
tab1[["Myocarditis"]]
tab1[[1]]
write.csv(tab1[["Myocarditis"]],
file = "../results/output/myocarditis_table.csv")
write.csv(tab1[["Pericarditis"]],
file = "../results/output/pericarditis_table.csv")
install.packages("lintr")
library(lintr)
lint(run_metanalysis.R)
lint(./scr/run_metanalysis.R)
lint("run_metanalysis.R")
lint("run_metanalysis.R")
lint("run_metanalysis.R")
lint("run_metanalysis.R")
lint("run_metanalysis.R")
View(all_results)
?stop()
# check if reading the CSV has worked correctly
if (ncol(all_results) == 1) {
stop("read.csv error: data file only has 1 row")
}
all_results <- read.csv2("../data/temp/results_per_dap.csv")
# check if reading the CSV has worked correctly
if (ncol(all_results) == 1) {
stop("read.csv error: data file only has 1 row")
}
# check if reading the CSV has worked correctly
if (ncol(all_results) == 1) {
stop("Problem loading data (read.csv error): data file only has 1 row")
}
# check if reading the CSV has worked correctly
# this can go wrong if the CSV format doesn't match the read.csv settings
if (ncol(all_results) == 1) {
stop("Data input file format does not match read.csv settings : data file only has 1 row")
}
if (ncol(all_results) == 1) {
stop("Input format does not match read.csv() settings : data file only has 1 row")
}
if (ncol(all_results) == 1) {
print("Input format does not match read.csv() settings : data file only has 1 row")
}
all_results <- read.csv2("../data/temp/results_per_dap.csv")
# check if reading the CSV has worked correctly
# this can go wrong if the CSV format doesn't match the read.csv settings
# and fix if the format is wrong
if (ncol(all_results) == 1) {
print("Input format does not match read.csv() settings : data file only has 1 row")
all_results <- read.csv("../data/temp/results_per_dap.csv")
}
if (ncol(all_results) == 1) {
print("Input format does not match read.csv() settings : data file only has 1 row")
all_results <- read.csv("../data/temp/results_per_dap.csv")
print(ncol(all_results))
}
all_results <- read.csv2("../data/temp/results_per_dap.csv")
# check if reading the CSV has worked correctly
# this can go wrong if the CSV format doesn't match the read.csv settings
# and fix if the format is wrong
if (ncol(all_results) == 1) {
print("Input format does not match read.csv() settings : data file only has 1 row")
all_results <- read.csv("../data/temp/results_per_dap.csv")
print(ncol(all_results))
}
all_results <- read.csv2("../data/temp/results_per_dap.csv")
# check if reading the CSV has worked correctly
# this can go wrong if the CSV format doesn't match the read.csv settings
# and fix if the format is wrong
if (ncol(all_results) == 1) {
print("Input format does not match read.csv() settings : data file only has 1 row")
all_results <- read.csv("../data/temp/results_per_dap.csv")
if (ncol(all_results) == 1) {
stop("Issue with data that cannot be solved with changing read.csv() settings")
}
}
all_results <- read.csv2("../data/temp/results_per_dap.csv")
# check if reading the CSV has worked correctly
# this can go wrong if the CSV format doesn't match the read.csv settings
# and fix if the format is wrong
if (ncol(all_results) == 1) {
print("Warning: data file only has 1 row, attempt different read.csv() option")
all_results <- read.csv("../data/temp/results_per_dap.csv")
if (ncol(all_results) == 1) {
stop("Issue with data that cannot be solved with changing read.csv() settings")
}
}
all_results <- read.csv2("../data/temp/results_per_dap.csv")
# check if reading the CSV has worked correctly
# this can go wrong if the CSV format doesn't match the read.csv settings
# and fix if the format is wrong
if (ncol(all_results) == 1) {
print("Warning: data file only has 1 row, code will attempt different read.csv() option to solve")
all_results <- read.csv("../data/temp/results_per_dap.csv")
if (ncol(all_results) == 1) {
stop("Issue with data that cannot be solved with changing read.csv() settings")
}
}
#-- code needed for dummy data to create datasets from different sources --#
dlab <- c("BIFAP", "PHARMO", "ARS", "CPRD")
dap_sets <- vector(mode = list, length = length(dlab))
dap_sets <- vector(mode = list, length = seq_len(dlab))
dap_sets <- vector(mode = list, length = length(dlab))
length(dlab)
dap_sets <- vector(mode = "list", length = length(dlab))
names(dap_sets) <- dlab
for (i in seq_len(dlab)) {
subset <- all_results %>%
mutate(dlab = dlab[i])
dap_sets[[i]] <- subset
}
for (i in 1:seq_len(dlab)) {
subset <- all_results %>%
mutate(dlab = dlab[i])
dap_sets[[i]] <- subset
}
seq_len(dlab)
for (i in 1:length(dlab)) {
subset <- all_results %>%
mutate(dlab = dlab[i])
dap_sets[[i]] <- subset
}
scri_data <- NA
for (i in seq_len(dlab)) {
scri_data <- rbind(scri_data, dap_sets[[i]])
}
for (i in 1:length(dlab)) {
scri_data <- rbind(scri_data, dap_sets[[i]])
}
View(scri_data)
for (i in 1:length(dlab)) {
subset <- all_results %>%
select(-X) %>%
mutate(dlab = dlab[i])
dap_sets[[i]] <- subset
}
View(scri_data)
scri_data <- data.frame()
for (i in 1:length(dlab)) {
scri_data <- rbind(scri_data, dap_sets[[i]])
}
View(scri_data)
View(scri_data)
levels(scri_data$vacctype)
is.numeric(scri_data$lci)
is.numeric(scri_data$irr)
View(scri_data)
max(scri_data$irr)
?apply()
apply(scri_data[c("irr", "lci", "uci", "sei", "yi"),],
FUN = function(x) {abs(max(x)) > 10})
apply(scri_data[c("irr", "lci", "uci", "sei", "yi"),],2,
FUN = function(x) {abs(max(x)) > 10})
abs(max(scri_data$irr))
abs(max(scri_data$irr)) > 10
apply(scri_data[,c("irr", "lci", "uci", "sei", "yi")], 2,
FUN = function(x) {abs(max(x)) > 10})
max(scri_data$uci)
max(scri_data$sei)
# check if data are in correct formats
numvars <- c("irr", "lci", "uci", "sei", "yi")
for (i in 1:length(numvars)) {
if(abs(max(scri_data[, numvars[[i]]])) == TRUE) {
print(c("Warning", numvars[[i]], "max value larger than 10"))
}
}
abs(max(scri_data[, numvars[[i]]]))
i = 3
abs(max(scri_data[, numvars[[i]]]))
for (i in 1:length(numvars)) {
if(abs(max(scri_data[, numvars[[i]]])) > 10) {
print(c("Warning", numvars[[i]], "max value larger than 10"))
}
}
for (i in 1:length(numvars)) {
if(abs(max(scri_data[, numvars[[i]]])) > 10) {
print(c(numvars[[i]],"Warning: max value larger than 10"))
}
}
for (i in 1:length(numvars)) {
if(is.numeric(scri_data[, numvars[[i]]]) == FALSE) {
print(c(numvars[[i]], "Error: not numeric"))
}
if(abs(max(scri_data[, numvars[[i]]])) > 10) {
print(c(numvars[[i]],"Warning: max value larger than 10"))
}
}
# check if data are in correct formats
numvars <- c("irr", "lci", "uci", "sei", "yi")
